* Titelseite
* Abstract
* Danksagungen
* Inhaltsverzeichnis
  


# THEORYTEIL


* Entstehung und Grundgedanke
	zwei dinge sind damit gemeint. Skizze und Entwurfmethodik. Zusätzlich
	dazu gibt es auch noch eine kleines Regelwerk, die man Einhalten soll,
wenn man die Skizze in Programmcode implementiert.
** Prinzipien 
   Kiss, und yagni noch hinzufügen
   yagni, weil man software so gestaltet, dass man änderungen leicht zu machen sind, und es so leichter ist
  dinge erst zu programmieren, wenn man es braucht.

* Pfeile und Kreise
** RomanNumbers Beispiel
** "Aufmachen" einer Zelle

* Rekursive Eigenschaft der Softwarezellen/ Architekur

* Grundlegende Notationen 
  Weitere Notationen kurz erklärt. Auch mit "Integrationen" aber noch nicht erklären, dass es ein Unterschied gibt. 
  
  Provider Dreieck.
* Implementationsregeln / C# Exkurse
Integrationen und Operationen (einzige Regel?)
** Beispiel foreach und Funktionsaufruf als negativ Beispiel.
** Weitere Beispiele was erlaubt ist und was nicht erlaubt ist.
   Rückgabewert entgegennehmen.
** Warum macht man das? Sinn der Aufteilung. -> Ketten Bild
   nochmal rückbesinnen auf CCD
   Größtes übel funktionale Abhängigkeiten. 
   Wenn jemand seine Arbeit erst zuende machen kann, wenn ein anderer seine Arbeit getan hat.
** Zusammenfassung - IODA Architekur -  Tabelle

   Tabelle: 
   Daten - Methoden in Daten-Objekte aufrufen? Darf Operation die Methode kennen?
   Daten - was bedeutet die eigentlich? Extra Funktionen? file open handlers?
   Daten - Darf Integration wirklich Kontruktor aufrufen, das sind doch daten, oder gelten nur persistente daten?
  
* Ablauf der kompletten Flow Design - Entwurfsmethode
  endet mit Einteilen in Klassen, DLL, Anwendungen,...

  Entwurf ist ein Interativer Prozess, somit wäre round trip super "Sinn des Systems SharpFlowDesign erläutern"


#  PRAXISTEIL
  


* Systemanalyse
** Vision
** Gedanken zur Machbarkeit, alternative Lösung von zu schwiergen Problemen, Einschränkungen
   Attribute als Hilfe zum Identifizieren von Funktionen.
** Was soll das Programm können.
*** Zeichnen eines Flow Designs.
    Gute Usability in Anlehnung an Node-basierte Grafik Anwendungen.
    Erzeugen von Nodes, Selektieren, Beschriften, Bewegen, 
    Kopieren, Eingliedern von neuen Nodes in bestehende.
    Anordenen, automatisches Spacing
    Implementation Previewen mit Maus-over
    Tests dranhängen an Node, Kommentare dranhängen,
    Einkreisen/ Gruppieren in Klassen
*** Generieren des Codes aus dem Flow Design
*** Einlesen eines Csharp Files / Solution und generieren des Flow Design
* Vorstellung Roslyn
* Vorstellung was erreicht wurde
* Schwierigkeiten, Ausblick und Fazit
  

  


* Appendix
** Flow Design in anderen Sprachen
*** Python 
*** MaxScript
* Referenzen
