\contentsline {section}{\numberline {1}Entstehung und Grundgedanken}{2}{section.1}
\contentsline {section}{\numberline {2}Pfeile und Kreise}{4}{section.2}
\contentsline {subsection}{\numberline {2.1}{\bfseries \sffamily DRAFT} RomanNumbers Beispiel}{4}{subsection.2.1}
\contentsline {subsection}{\numberline {2.2}{\bfseries \sffamily MISSING IMAGES} Hirarchische Datenfl\IeC {\"u}sse}{5}{subsection.2.2}
\contentsline {section}{\numberline {3}Grundlegende Notationen}{5}{section.3}
\contentsline {subsection}{\numberline {3.1}{\bfseries \sffamily MISSING IMAGES} Datentypen}{5}{subsection.3.1}
\contentsline {subsection}{\numberline {3.2}{\bfseries \sffamily MISSING IMAGES} Definition eigener Datentypen}{5}{subsection.3.2}
\contentsline {subsection}{\numberline {3.3}{\bfseries \sffamily MISSING IMAGES} Arrays (auch mit fester Gr\IeC {\"o}\IeC {\ss }e)}{5}{subsection.3.3}
\contentsline {subsection}{\numberline {3.4}{\bfseries \sffamily FRAGEN} 0 bis n (Datenstrom)}{6}{subsection.3.4}
\contentsline {subsection}{\numberline {3.5}{\bfseries \sffamily FRAGEN} Container / Listen}{6}{subsection.3.5}
\contentsline {subsection}{\numberline {3.6}{\bfseries \sffamily FRAGEN} 0 bis 1 (optionaler Output)}{7}{subsection.3.6}
\contentsline {subsection}{\numberline {3.7}{\bfseries \sffamily MISSING IMAGES} Mehrere Inputs / Outputs auf einem Weg}{7}{subsection.3.7}
\contentsline {subsection}{\numberline {3.8}{\bfseries \sffamily DONE} Joined Inputs}{8}{subsection.3.8}
\contentsline {subsection}{\numberline {3.9}{\bfseries \sffamily FRAGEN} Tonnen}{8}{subsection.3.9}
\contentsline {subsection}{\numberline {3.10}{\bfseries \sffamily TODO} Anh\IeC {\"a}ngigkeiten / Provider}{9}{subsection.3.10}
\contentsline {subsection}{\numberline {3.11}{\bfseries \sffamily TODO} GUIS / Programmstart/ Ende}{9}{subsection.3.11}
\contentsline {subsection}{\numberline {3.12}{\bfseries \sffamily TODO} Klassen / Container definieren}{9}{subsection.3.12}
\contentsline {section}{\numberline {4}Implementationsregeln / C\# Exkurse}{9}{section.4}
\contentsline {subsection}{\numberline {4.1}IODA Architekur}{9}{subsection.4.1}
\contentsline {subsubsection}{\numberline {4.1.1}{\bfseries \sffamily DRAFT} Erl\IeC {\"a}uterung des Schaubildes}{9}{subsubsection.4.1.1}
\contentsline {subsubsection}{\numberline {4.1.2}{\bfseries \sffamily DRAFT} PoMO ( Principle of Mutual Oblivion)}{10}{subsubsection.4.1.2}
\contentsline {subsubsection}{\numberline {4.1.3}{\bfseries \sffamily DRAFT} IOSP ( Integration Operation Segregation Principle)}{11}{subsubsection.4.1.3}
\contentsline {subsubsection}{\numberline {4.1.4}{\bfseries \sffamily DONE} Tabelle - IOSP auf einen Blick}{12}{subsubsection.4.1.4}
\contentsline {subsection}{\numberline {4.2}{\bfseries \sffamily DONE} Beispiel foreach und Funktionsaufruf als negativ Beispiel.}{13}{subsection.4.2}
\contentsline {subsection}{\numberline {4.3}C\# Features um Datenfl\IeC {\"u}sse zu implementieren}{16}{subsection.4.3}
\contentsline {subsubsection}{\numberline {4.3.1}{\bfseries \sffamily TODO} LINQ und Lambdas}{16}{subsubsection.4.3.1}
\contentsline {subsubsection}{\numberline {4.3.2}{\bfseries \sffamily DRAFT} yield return}{16}{subsubsection.4.3.2}
\contentsline {subsection}{\numberline {4.4}{\bfseries \sffamily FRAGEN} Datenstr\IeC {\"o}me mit mehreren Wegen}{19}{subsection.4.4}
\contentsline {subsubsection}{\numberline {4.4.1}Ein Output-Weg mehrer Empf\IeC {\"a}nger}{19}{subsubsection.4.4.1}
\contentsline {subsubsection}{\numberline {4.4.2}{\bfseries \sffamily DRAFT} Mehrere Output-Wege}{19}{subsubsection.4.4.2}
\contentsline {subsubsection}{\numberline {4.4.3}{\bfseries \sffamily FRAGEN} mit und/oder den Kontrollfluss notieren.}{20}{subsubsection.4.4.3}
\contentsline {subsection}{\numberline {4.5}Weitere Beispiele was erlaubt ist und was nicht erlaubt ist.}{20}{subsection.4.5}
\contentsline {subsubsection}{\numberline {4.5.1}{\bfseries \sffamily DONE} R\IeC {\"u}ckgabewert erwarten von Funktion als Parameter \IeC {\"u}bergeben.}{20}{subsubsection.4.5.1}
\contentsline {subsubsection}{\numberline {4.5.2}{\bfseries \sffamily TODO} API-Aufruf, Filehandling?, Daten in Integrationen?}{21}{subsubsection.4.5.2}
\contentsline {subsection}{\numberline {4.6}{\bfseries \sffamily TODO} Warum macht man das? Sinn der Aufteilung.}{21}{subsection.4.6}
\contentsline {subsection}{\numberline {4.7}{\bfseries \sffamily DRAFT} Ausnahmen}{21}{subsection.4.7}
\contentsline {subsubsection}{\numberline {4.7.1}{\bfseries \sffamily TODO} Rekursion}{21}{subsubsection.4.7.1}
\contentsline {subsubsection}{\numberline {4.7.2}{\bfseries \sffamily DONE} Integrationen}{21}{subsubsection.4.7.2}
\contentsline {subsection}{\numberline {4.8}{\bfseries \sffamily FRAGEN} KNOWNCAUSE Zusammenfassung - IODA Architekur - Tabelle}{22}{subsection.4.8}
\contentsline {section}{\numberline {5}Ablauf der kompletten Flow Design - Entwurfsmethode}{22}{section.5}
\contentsline {subsection}{\numberline {5.1}{\bfseries \sffamily TODO} Definieren der Portale und Provider}{22}{subsection.5.1}
\contentsline {subsection}{\numberline {5.2}{\bfseries \sffamily TODO} Interfaceskizze ( im Falle einer GUI Anwendung )}{22}{subsection.5.2}
\contentsline {subsection}{\numberline {5.3}{\bfseries \sffamily TODO} Flow Design Entwurf}{22}{subsection.5.3}
\contentsline {subsection}{\numberline {5.4}{\bfseries \sffamily FRAGEN} Einordnen der Funktionseinheiten in bestimmte Container}{22}{subsection.5.4}
\contentsline {subsection}{\numberline {5.5}{\bfseries \sffamily FRAGEN} Optional - Bestimmen von Parallelit\IeC {\"a}ten}{23}{subsection.5.5}
\contentsline {section}{\numberline {6}{\bfseries \sffamily TODO} Rekursive Eigenschaft der Softwarezellen/ Architekur}{23}{section.6}
\contentsline {section}{\numberline {7}Backlog}{23}{section.7}
\contentsline {subsection}{\numberline {7.1}Einfaches Beispiel eines Flow Designs}{23}{subsection.7.1}
\contentsline {subsubsection}{\numberline {7.1.1}Negativ Beispiel}{23}{subsubsection.7.1.1}
