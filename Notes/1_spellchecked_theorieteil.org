
* Entstehung und Grundgedanken

** Einleitung

Flow Design ist aus der Clean Code Development Bewegung heraus entstanden. Hauptinitiatior und Erfinder ist Ralf Westphal.
Ralf Westphal war auch Mitbegründer und Miterfinder der Clean Code Development Bewegung.


Clean Code Development ist eine Ansammlung aus Prinzipien, die einem helfen
sollen sauber programmierte Software zu schreiben. Diese Prinzipen sind aus dem Buch "Clean
Code" von Robert C. Martin entnommen. Sauber programmierte Software hat 
die vorallem die Eigentschaft, dass Änderungen und Erweiterungen an ihrer Funktionalität
leicht zu realisieren sind. Laut Robert C. Martin gibt es in der Softwareentwicklung
keine Garantie, dass sich eine für die Software relevanten
Rahmenbedingungen nicht jederzeit plötzlich ändern können. Sauber programmierte
Software kann leichter auf solche Änderungen angepasst werden. Es bedarf zwar
anfänglich mehr Zeit ein Feature zu implementieren, dass den CCD Prinzipien entspricht, auf langer
Sicht jedoch steigt dieser Zeitaufwand nicht mit jedem neuen Feature stark
an. Im Vergleich dazu steigt bei einer unsauber programmierten Software der Zeitaufwand ein neues
Feature zu implementierten mit der Anzahl an bereits implementieren Features
exponentiell an. Irgendwann erreicht der Quellcode der Software dann einen Punkt, an
dem der Zeitaufwand ein neues Feature zu implementieren
derart groß geworden ist, dass es besser ist die Software neu zu schreiben, anstatt sie anzupassen.
CCD bezeichnet eine saubere programmierte Software aus diesem Grund auch als /evolvierbar/.
Software die mit dem Fokus auf Evolvierbarkeit hin programmiert wurde,
kann leicht an neue Rahmenbedingungen oder Kundenwünsche angepasst werden.
[link  http://clean-code-developer.de/das-wertesystem/#Evolvierbarkeit]. 
Eine weitere Eigenschaft von sauber programmierter Software ist dass sie gut zu
lesen ist und möglichst ohne Kommentare verstanden werden kann.
Programmcode wird öfters gelesen als geschreiben. Aus diesem Grund sind gute
Lesbarkeit eine wichtige Eigenschaft. Gute Lesbarkeit ist auch dann von großer
Bedeutsamkeit, wenn eine andere Person den Programmcode nachvollziehen muss, als diejenige Person, die ihn geschrieben hat.
Somit ist in größeren Softwareprojekten ein saubere Codebasis umso unverzichtbarer.

Prinzipien haben jedoch die Eigenheit, dass sie nicht so leicht einzuhalten sind wie konkrete Regeln.
Somit ist es in der Praxis schwer die Prinzipien auf den eigenen Code anzuwenden.
Hierbei soll Flow Design einen Lösungansatz bieten. Flow Design bieten in
Ergänzung zu den CCD Prinzipen eine Entwurfsmethodik und dazugehörende Implementierungsregeln, die
die einfach zu befolgen sind und man erhält fast automatisch einen Code, der ein Großteil der CCD Prinzipien erfüllt.

** CCD Prinzipien
Flow Design legt den Schwerpunkt vor allem auf folgende Prinzipien von CCD:

  | KISS (Keep It Stupid Simple)      | Ein System sollte so einfach wie möglich gestaltet werden.                                                                                                         |
  | YAGNI ( You Ain't Gonna Need It ) | Es soll nicht unnötig viel Zeit damit verbracht werden für zukünftige Eventualitäten zu programmieren. Der Fokus sollte darauf liegen, was aktuell wirklich benötigt wird. |
  | Lose Koppelung                    | Separate Einheiten eines Systems sollen über nur möglichst  wenige Punkte miteinander kommunizieren.                                                      |
  | Orthogonalität                    | Änderungen an einer Funktion des Systems sollen auf so wenig wie möglich andere Funktionen des Systems negativen Einfluss haben.                                   |


*** KISS
Die Komplexität der Lösung eines Problems soll immer in Relation zu der
Komplexität des Problems stehen.

Schnell passiert es, dass man die einfachste Lösung für ein Problem übersieht und das Problem unnötig verkompliziert.
Das KISS Prinzip soll einen in erster Linie ein Bewusstsein dafür schaffen bei
komplizierten Lösungen innezuhalten und sich nochmal genau zu
überlegen, ob es nicht eine einfachere Lösung gibt.
Manche Problemdomänen erfordern jedoch eine komplexe Lösung, da das Problem
komplex ist.

Verkomplizierte Lösungen müssen am besten schon beim Entwurf erkannt werden.
Hierbei soll Flow Design als Entwurfsmethode helfen, die einfachste und leicht
verständlichste Lösung für ein Problem zu finden.

*** YAGNI
Vielen Softwareentwickler ist es wohl schon passiert, dass sie es zu gut gemeint
haben mit dem vorausschauendem Denken. Etliche Funktionen wurden für ein
zukünftiges Szenario implementiert oder verkompliziert, die jedoch nie
eintrafen, oder falls sie eintrafen kam es anders als gedacht, oder die Software
wurde bereits durch eine andere ersetzt.
YAGNI soll einem das Bewusstsein dafür schärfen, wann man sich gerade mit einer
Situation beschäftigt, die die aktuellen Rahmenbedingungen überschreiten.
Man sollte sich eher auf das aktuelle Szenario beschränken und keine unnötige Ressourcen für zukünftige
Eventualitäten verschwenden.
Flow Design bietet hierfür Implementierungsregeln, die es einem ermöglichen
schnell Änderungen am Code zu realisieren.
Diese Eigenschaft des Codes bietet damit die Basis diesem Prinzip auch getrost
zu befolgen und sich auf die aktuellen Rahmenbedingungen zu konzentrieren.

*** Lose Koppelung
Ein System soll aus möglichst voneinander unabhängigen Untersystemen bestehen,
die nur über eine  klar definierte Stelle miteinander kommunizieren.
Bei jedem Aufruf einer Funktion oder Abrufen einer Variable entsteht eine
Koppelung zwischen beiden.
Ändert sich die Struktur des Codes, so muss jede Stelle angepasst werden, die zu
der geänderten Struktur eine Koppelung besitzt. Mit loser Koppelung möchte man
veranschaulichen, dass wenn eine Koppelung nötig ist, diese an einer Stelle konzentriert sein soll und
sich nicht an verschiedenen Stellen des Codes fortpflanzen soll.
Flow Design fördert das Entkoppeln und zeigt Abhängigkeiten bereits bei der Modellierung.

*** Orthogonalität
In einem dreidimensionalen Raum sind die 3 Achsen üblicherweise zueinander
orthogonal. Verschiebe ich ein Objekt auf einer Achse, so bleiben die Werte der
beiden anderen unberührt Wäre eine Achse nicht orthogonal zu den beiden anderen,
so würde eine Verschiebung entlang dieser Achse auch eine Änderung der Werte
einer anderen Achse bewirken. Diese Eigenschaft wird nun auch auf Code und wie
er auf Änderungen reagiert, projiziert.
Wird an einer Stelle der Code geändert, soll diese Änderung möglichst keinen Einfluss auf
andere Teile des Codes haben. Flow Design fördert eine starke Entkoppelung der
einzelnen Funktionseinheiten, dadurch wird auch das das Prinzip der
Orthogonalität erfüllt.


** Weitere Prinzipien die Beachtung finden sollen

| DRY  (Don't Repeat Yourself)    | Coderedundanzen vermeiden, zerlegen in Codebestandteile, die man an mehreren Stellen wiederverwenden kann                                                                                      |
| Kleine Funktionen / Methoden    | Viele kleine Funktionen , anstatt eine große Funktion                                                                                                                                          |
| Single Responsibility Principle | Jede Funktion/Klasse soll sich nur um eine Sache kümmern. Falls eine Funktion mehrere Aufgaben erledigt, sollten sie diese nicht selbst implementieren, sondern an Unterfunktionen weitergeben |
| Information Hiding Principle    | Ein Untersystem soll seiner Inneren Funktionalität vor anderen Systemen verbergen und eine möglichst fokussierte Schnittstelle bieten, mit dem äußere Systeme dieses System steuern können.      |

*** DRY
Einer der wichtigsten Aspekte von sauberen Codebasen. Der Grund warum es
überhaupt Programmstrukturen wie Funktionen, Methoden, Klassen etc. gibt.
Durch Coderedundanzen (Copy-Paste) können schnell Fehler entstehen, der Code
wird unverständlicher und durch die Wiederholungen schwerer zu lesen.
Wenn man das DRY Prinzip befolgt, können viele Änderungen meistens bereits an
eine Stelle gezielt geändert werden, anstatt die Änderung an vielen Stellen
machen zu müssen.

*** Kleine Funktionen / Methoden
CCD schlägt vor Methoden so klein wie nur möglich zu gestalten (ca. 3-10 Zeilen) und sobald sie länger werden den Code aufzuteilen und in kleinere Methoden auszulagern.
Nachteile
- In den meisten Fällen fördert das Einhalten dieser Regel eine bessere Verständlichkeit
  des Codes. Es gibt jedoch auch Fälle, bei denen der abstraktere Namen der übergeordneten Methoden die Verständlichketi nicht
  fördert und eine geringere Verschachtelung die eigentlich Funkionalität besser
  ausdrückt und den Programmverlauf leichter zu überschauen macht.
- Das Finden von aussagekräftigen Namen erschwert sich zunehmend.
- In bestimmten Szenarien ist der Overhead eines Methodenaufrufs möglicherweise
  ein nicht zu verachtender Performanceaspekt (Remote Procedure Calls)
Vorteile
- Erspart Kommentare durch aussagekräftige Methodennamen
- Änderungen sind leichter zu realisieren, da durch kleine Methoden auch die
  höhere Wiederverwendbarkeit einzelner Methoden gegeben ist. Durch weniger Redundanzen kann man
  eine Änderung meistens gezielt an einer Stelle machen anstatt an vielen
  Stellen etwas ändern zu müssen.
- Erlaubt ein Denken auf höherer Abstraktionsebene, da low-Level
  Implementierungsdetails hinter aussagekräftigen Methodennamen verborgen sind.
- Erlaubt anderen Personen den Code leichter zu verstehen und  können selbst
  leichter Änderungen an der Codebasis realisieren, da sie nicht den kompletten
  Code nachvollziehen brauchen, sondern direkt zu den für sie relevanten Stellen
  springen können.
- Automatische Test / Unittest sind besser realisierbar, da man feingranularer
  Testen kann

*** Single Responsibiltiy Principle
Ein Grundgedanke des OO-Designs besteht darin, die Funktionalität der Software auf mehrere
Klassen zu verteilen. Jede dieser Klassen besteht aus Methoden, die thematisch zueinander gehören. 
Das Single Responsibiltiy Principle besagt, dass eine Klasse nur eine
Verantwortlichkeit (oder Aufgabenbereich) haben darf.
Oft ist mit Single Responsibility Principle auch das Trennen von
GUI, Daten und Businesslogik gemeint.

*** Information Hiding Principle
Eine Klasse besteht aus vielen Funktionen, diese werden jedoch nicht alle nach
außen zur Verfügung gestellt.
Oder eine API, die nach außen nur eine ganz bestimmte Schnittstelle bietet und
die Komplexität des Systems im Inneren verbergt. Informationen von der
Außenwelt zu vertecken ist eine Kernidee der objektorientierten Programmierung
und spielt auch bei Flow Design im Prinzip der gegenseitigen Nichtbeachtung
eine wichtige Rolle ( Vermerk auf späteres Kaptiel).

** Flow Design - Was ist das?

Unter Flow Design versteht man zwei Dinge:
Einmal das Diagramm und einmal die komplette Entwurfsmethode, indem das
Diagramm nur ein Teil davon ist.

Flow Design soll im Gegensatz zu UML besser geeignet sein, bereits in der Entwurfsphase Anwendung zu finden.
Ziel ist es sich auf dem Papier bereits ein Entwurf der Programmstruktur überlegen zu können.
Aktuell sei es aus der Mode gekommen, vor dem Programmieren einen Entwurf zu erzeugen, was vor allem daran läge, dass die vorhandenen
Entwurfsmethodiken eher hinderlich seien und einen unnötigen Overhead erzeugen ( laut Ralf Westphal)
Es sei somit üblich geworden die Denkarbeit, wie man seinen Code möglichst sauber strukturieren kann,
während dem Programmieren direkt im/vor dem Sourcecode zu verrichten.
Dies sei jedoch laut Ralf Westphal eine eher ungünstige Lösung und behindere eher den kreativen Denkprozess mit
unnötiger Schreibarbeit.
Auf dem Papier sei man mit einer passenden Entwurfsmethodik schneller und man könne auch verschiedene Ideen schneller
ausprobieren, Änderungen machen, oder auch wieder verwerfen, als direkt im Sourcecode.

Es geht jedoch nicht darum den Sourcecode bis ins kleinste Detail in eine Art visuelle Programmiersprache zu pressen,
sondern darum, wie man den Code am sinnvollsten in Funktionseinheiten zerlegt (die einen möglichst aussagekräftigen Namen haben sollten).
Wie die Funktionalität auf unterster Ebene implementiert wird, wird auf dem Diagramm nicht berücksichtigt.
Das ist jedoch keine negative Einschränkung, vielmehr ermöglicht dies, sich auf beim Entwurf nicht mit unnötigen Implementierungsdetails beschäftigen zu
müssen, sondern sich auf das Große ganze - das Zusammenspiel/ Komposition der Funktionseinheiten und den Datenfluss zu konzentrieren.

Anzumerken wäre noch, dass nicht der Kontrollfluss abgebildet wird, sondern, wie erwähnt, der Datenfluss.
** Referenzen

http://clean-code-developer.de/die-grade/roter-grad/

* Pfeile und Kreise
** RomanNumbers Beispiel

[[./img/FromRomanNumerals.png]]


Das nachfolgende Beispiel soll auf einfache Weise zeigen, wie ein Flow Design Diagramm aufgebaut ist.
Das Programm/Unterprogramm soll eine römische Zahl in eine Dezimalzahl konvertieren.

Alle eingekreisten Namen sind Funktionseinheiten, oder auch Softwarezelle genannt.
Diese werden in den meisten Fällen im Code als Methoden implementiert.
Die Pfeile zeigen den Datenstrom. Links die Inputs und rechts die Outputs.


Der Input-Datenstrom der ersten Funktionseinheit besteht aus einem String. Dieser String wird zerlegt in einzelne Buchstaben.
Der Buchstabenstrom fließt anschließend in eine weitere Funktionseinheit, die jeden Buchstaben zu der entsprechenden
Dezimalzahl konvertiert. Anschließend muss auf den Strom noch die Subtraktionsregel angewendet werden. Diese untersucht den
Strom aus Ganzzahlen auf Stellen, wo eine kleinere Zahl vor einer größeren Zahl steht und sie in dem Fall dann negativ macht.
Am Ende wird der Datenstrom einer Funktionseinheit übergeben, die alle Zahlen aufaddiert.
Das Ergebnis ist die Summe aller Zahlen.

** MISSING IMAGES Hierarchische Datenflüsse
Das Flow Design unterstützt die Funktion in eine Softwarezelle sozusagen hineinzuzoomen.
Hier erkennt man die rekursive Eigenschaft der Softwarezellen. Eine Softwarezelle kann wiederum aus mehreren Softwarezellen bestehen,
die zusammen die Aufgabe erledigen, die die übergeordnete Softwarezelle
beschreibt. Eine solche übergeordnete Softwarezelle wird als Integration
bezeichnet. Hat eine Softwarezelle keine untergeordneten Softwarezellen wird sie
als Operation bezeichnet. Was es mit dieser Aufteilung genau auf sich hat, wird im
Kaptiel 4 erläutert.

* Notationen
** MISSING IMAGES Datenströme
Über den Pfeilen, die die Richtung des Datenflussen darstellt, werden die im
Datenfluss enthaltenen Datentypen in runden Klammern eingetragen.
Eine leere Klammer bedeutet, dass ein Datenstrom ohne Daten fließt.
Die Funktionseinheit wird einfach nur aufgerufen, ohne ihr Daten zu übergeben.

Die Notation erlaubt es auch einzelne Datentypen zusätzlich noch mit einem Namen
zu versehen. Was vorallem bei primitiven Datentyen hilfreich sein kann. 
Der optionale Namen wird dem Datentyp durch einen Doppelpunkt getrennt vorangestellt.
** MISSING IMAGES Definition eigener Datentypen
Benutzt man einen Datenstrom bestehend aus einem eigenen Datentypen, so zeichnet man irgendwo auf dem Papier eine Box,
indem man den Datentyp mit seinen Membervariablen auflistet.

(Anmerkung: Diese Notation ist nicht offiziel Teil der Flow Design Notation,
sondern sind eine Ergänzung von Kevin Erath)
** MISSING IMAGES Arrays (auch mit fester Größe)
Werden Daten als Arrays mit fester Größe übergeben, so wird hinter dem Datentyp eine leere eckige Klammer angehängt.
Ist die Arraygröße bekannt, so kann man diese in die Klammer noch zusätzlich eintragen.
** 0 bis n (Datenstrom)

[[./img/diagram0n.png]]

Ein Datenstrom wird mit einem * außerhalb der Klammer dargestellt.
Selten wird ein Datenstrom auch mit geschweiften Klammern dargestellt, um ihn
von einem optionalen Output ( 0 bis 1 ) unterscheiden zu können: {int}.

Ein Datenstrom zeigt an, dass die in der Klammer stehenden Daten keinmal,
einmal, oder auch öfters als einmal fließen können.
** Container / Listen

[[./img/diagramCollection.png]]

Stern innerhalb der Klammer.
Der Datentyp liegt in einem Container vor.
Die zu bearbeitende Daten können entweder komplett auf einmal an die Funktionseinheit gegeben werden ( als Liste, Dictionary, etc. )
oder aber - falls die Programmiersprache dies unterstützt - als yield ähnlich
wie ein Stream realisiert werden, wo einzelne Elemente bereits abgearbeitet werden
können, bevor alle anderen Daten erzeugt wurden.

** 0 bis 1 (optionaler Output)

[[./img/diagramOptional.png]]

Mit einer eckigen Klammer lässt sich ein optional Output - einmal oder keinmal -
darstellen: [int].

Optionale Outputs können genau wie Datenströme nicht über ein Rückgabewert einer
Methode realisiert werden, da nach jedem Aufruf genau ein Rückgabewert erwartet wird. Wie solche
Datenflüsse in C# realisiert werden, wird in Kapitel 4 gezeigt.

** MISSING IMAGES Mehrere Inputs / Outputs auf einem Weg
Mehrere Inputs werden in die Klammer geschrieben und mit einem Komma getrennt.

Mehrere Outputs lassen sich nicht in allen Sprachen einfach realisieren
Wahlweise kann man es mit Tupel realisieren, oder man verwendet stattdessen
einen eigenen Datentyp, der alle Output-Daten beinhaltet.

** Joined Inputs

[[./img/diagramJoin.png]]

Falls der Output mehrere Softwarezellen in einen Datenstrom zusammenlaufen
sollen und dieser dann als Input in eine anderen Softwarezelle hineinfließen
soll , wird das mit Hilfe eines s.g. Joints dargestellt. 
Dieser wird als Linie dargestellt an die mehrere Inputs zusammenlaufen.

Im Code kann dies wird dies meistens als Methode umgesetzt, die mehrere Inputparameter entgegennimmt.
Wichtig hierbei ist, dass das Bündeln der Datenflüsse nicht Aufgabe der
Funktionseinheit F ist, sondern ihrer Umgebung ( z.B einer übergeordneten Methode).
Die Funktionseinheit F erwartet einfach ein Datenstrom mit zwei Daten x und y
und kennt deren Herkunft nicht.

** Tonnen

[[./img/diagramTonne.png]]

Eine Tonne zeigt an, dass die Funktionseinheit state-behaftet ist.
In einer OO-Sprache wie C# wäre das in den meisten Fällen ein Lesen oder
Schreiben einer Membervariable einer Klasse.

** MISSING IMAGES Abhängigkeiten / Provider

Eine Tonne die mit einer Linie zu einer Funktionseinheit verbunde ist, soll
anzeigen, dass die Funktion auf externe Ressourcen zugreift, wie zum
Beispiel eine Datei oder Datenbank. 
Geschieht der Zugriff auf die Resource über eine Helferklasse, die den Zugriff
kapselt, wird anstelle der Tonne ein Dreieck als Symbol verwendet. Eine solche
Klasse wird auch als Provider bezeichnet. 
Den Kreis kann man sich bildlich wie eine Hand vorstellen, an die sich die
Funktion festhält, und daruch eine Abhängigkeit symbolisiert.

** MISSING IMAGES GUIS / Programmstart/ Ende
Wenn eine Funktionseinheit direkt durch den Programmstart aufgerufen wird, so
wird dies mit einem leeren Kreis dargestellt. Genau so verhält es sich mit dem
Programmende, mit der Unterschied, dass noch innerhalb des Kreises ein Kreuz ist.
Soll dargestellt werden, dass eine Funktionseinheit von einem Event aus der GUI ausgelöst
wurde, oder die ausgehenden Daten einer Funktionseinheit in das GUI übergeben werden, so
wird ein Viereck am Anfang bzw. Ende des Pfeiles eingezeichnet.

** MISSING IMAGES Klassen / Container definieren
Das Definieren von Container und Zuordnen von Funktionseinheiten ist auch
einfach möglich. Unter Container versteht man: Klassen, DLLs und Anwendungen.
Es gibt zwei Möglichkeiten eine Zugehörigkeit zu einem Container zu notieren.
Entweder man schreibt direkt unter der Funktionseinheit den Namen des
Containers, oder man umrandet mehrere Funktionseinheiten und notiert den Namen
des Containers am Rand der Umrandung.
** Referenzen
Bilder sind von:
http://flow-design.org/overview/implementation/#How_to_implement_inputs_to_a_functional_unit

* Implementation

Flow Design hat 2 Implementierungsregeln, die zu beachten sind:

- Trennen von Integrationen und Operationen
- keine funktionale Abhängigkeiten in Operationen zu anderen Funktionseinheiten aus dem selben Programm

Um was es sich dabei im Detail handelt, wird in diesem Kaptiel erläutert.

** IODA Architektur
Wie schon in dem vorherigen Kapitel angemerkt, unterscheidet Flow Design zwei
unterschiedliche Arten von Funktionseinheiten. Integrationen und Operationen.
Die IODA Architektur beschreibt die Eigenschaften von diesen beiden genauer.

IODA steht für: Integration Operation Data API
 #+CAPTION: http://blog.ralfw.de/2015/04/die-ioda-architektur.html
[[./img/ioda1.png]]

*** DRAFT Erläuterung des Schaubildes
Operationen sollen komplett unabhängig vom Rest ihrer Umwelt funktionieren und
dürfen aus diesem Grund andere Funktionenseinheiten nicht kennen.

Die Aufgabe einer Integration ist, die unabhängigen Operationen in das große Ganze zu
Integrieren. 
(Fußnote) Ralf Westphal spielte auch mit den Gedanken diese Funktionseinheiten als Koordinatoren oder
Kompositionen zu bezeichnen.

Integrationen "integrieren" andere Integrationen und/oder Operationen in das Programm. Sie dürfen also funktional abhängig sein
von anderen von Funktionseinheiten.

Im Gegensatz dazu dürfen Operationen keine Integrationen oder andere Operationen
kennen. Sie dürfen aber auf Daten zugreifen. Über diese entsteht auch die einzige Möglichkeit der
Kommunikation zwischen Operationen. Mit Daten sind hauptsächlich die inpersitent
Daten gemeint. Daten in Form von Objekten und primitive Datentypen, die von den
integrierenden Funktionseinheiten koordiniert werden.
Sowohl Operationen als auch Integrationen dürfen Daten Erzeugen.
Beispielsweise das Aufrufen eines Konstruktors oder Deklarieren einer lokalen Variablen.
Das "Verdrahten" von Datenflüssen übernehmen jedoch die Integrationen ( was auf
dem Schaubild leider nicht so deutlich herauskommt). 
Mit Daten können auch persitente Daten auf der Festplatte gemeint sein, wobei
ein Zugriff auf persitente Daten eigentlich immer über eine API geschieht und
somit würden solche Aufrufe dann eher zu der Gruppe API zählen.

Die IODA Architektur besagt, dass API-Aufrufe sich nur innerhalb von Operationen befinden
dürfen, damit diese Informationen gekapselt und die Integrationen frei von API-spezifisches Wissen bleiben.


Anhand einer Flow Design Skizze, kann man leicht herausfinden, welche Methoden Operationen sind und welche
Integrationen. Alle Leaf-Knoten sind Operationen, der Rest sind Integrationen.


*** PoMO ( Principle of Mutual Oblivion)
#+BEGIN_QUOTE
    Ein Producer kennt seinen Consumer nicht. Ein Consumer kennt seinen Producer
    nicht. Das nenne ich das Principle of Mutual Oblivion (PoMO,
    Prinzip der gegenseitigen Nichtbeachtung) -- architect napkin, Seite 80
#+END_QUOTE

Dieses Prinzip besagt, dass Funktionseinheiten sich nicht gegenseitig kennen sollen.
Es soll auch verhindert werden, dass eine Einheit eine andere aufruft und von deren Ergebnis
abhängig ist, bzw. auf das Ergebnis wartet.
Eine Funktionseinheit soll, nachdem sie die Daten bearbeitet hat, sie einfach nach
außen weiter reichen und nicht wissen, wer die Daten entgegennimmt.
Dieses Prinzip verhindert eine Koppelung zwischen den einzelnen Funktionseinheiten.

Um jedoch ein "Zusammenspiel" zwischen den einzelnen entkoppelten Einheiten zu ermöglichen, bedarf es einen oder
mehrere "Koordinatoren" welche diesem Prinzip nicht entsprechen müssen.
Nur so kann aus vielen kleinen Funktionseinheiten ein großes Ganzes werden, dass eine komplexe Aufgabe lösen kann.
Damit die das Zusammenspiel leicht zu modifizieren bleibt und die Verdrahtung
leicht zu verstehen sind gelten für Integrationen einige Einschränkungen, die
unter der Namen "Integration Operationen Segregation Principle" zusammengefasst
werden.



*** DRAFT IOSP ( Integration Operation Segregation Principle)

Dieses Prinzip besagt, dass eine Funktionseinheit entweder eine Operation oder eine Integration ist und beide
Verantwortungsbereiche nicht vermischt werden dürfen.

**** Operationeno



Operationen sind Methoden, die Logik/ Kontrollstrukturen enthalten dürfen. In C# wären das:
- if, else
- switch, case
- for, foreach,
- while, do
- try, catch, finally
- goto




Gleichzeitig müssen die Operationen das PoMO Prinzip erfüllen, sie dürfen nicht
wissen, er die Daten bekommt oder was damit passiert, aus diesem Grund darf auch
kein Rückgabewert erwartet werden, sonst lassen sich daraus Rückschlüsse bzw. Erwartungen verknüpfen.
Ein Funktionsaufruf ist nur über Actions ( Funktionszeiger ), die man als Funktionsparameter mit übergibt, oder Events möglich.
Beide dürfen keine Rückgabewerte haben, was bei Actions implizit der Fall ist.
Durch diese Regel wird einer Operation ermöglicht eine andere Funktion
aufzurufen, ohne das sie das PoMO bricht. Sie bestimmt nicht selbst, welche
Funktion sie aufruft, sondern die übergeordnete Funktion, welche die Operation
aufruft ( und somit automatisch eine Integration sein muss, welche die PoMO Bedingung nicht erfüllen muss).
Wie das praktisch aussieht, wird im Laufe des Kapitels anhand von konkreten
Beispiel genauer veranschaulicht.

Operationen sind also imperative programmiert. Imperative Programmierung ist ein Programmierstill,
mit dem Fokus auf das *wie* ein Problem gelöst werden soll.
Im Gegensatz dazu steht der deklarative Ansatz.
Beim deklarativen Programmieren steht der Fokus auf das *was* getan werden soll und nicht so sehr,
wie es im Detail genau angestellt wird. Ein Beispiel hierfür wären zum Beispiel SQL Befehle.
Hier wird nur gesagt, was man haben möchte und das Programm kann dann die Anfrage nochmal untersuchen
und selbst bestimmen, wie es die Anfrage am besten ausführt.

**** Integrationen

Die Integrationen werden nach Flow Design deklarative programmiert.
Diese Funktionseinheiten dürfen anders als die Operationen, andere Funktionseinheiten aufrufen, sie also kennen.
Die Integrationen erfüllen also nicht das /Principle of Mutual Oblivion/
Der Unterschied beim Flow Design ist jedoch, dass eine bewusste Trennung eingehalten wird.

Integrationen dürfen auch auf die Terminierung einer Funktionseinheit warten und den Rückgabewert  weiterreichen an andere Funktionseinheiten.
Dafür dürfen sie keine Logik im Sinne von Kontrollstrukturen beinhalten.
Auch dürfen sie keine API-spezifischen Befehle kennen, wie zum Beispiel Zugriffe
auf Resourcen wie Konsole, UI oder Dateien.

Die Businesslogik, das was die Funktionalität erzeugt, diese befinden sich in Operationen und sind entkoppelt von ihrer Umgebung.
Sie bekommen einfach nur von irgendwo her einen Input (bzw. bei keinen Inputparametern einfach ausgeführt werden) und führen damit die von ihnen implementierte
Logik aus und geben das Ergebnis nach außen. Beim nach außen Reichen kennt die Funktionseinheit jedoch nicht den Empfänger.

*** Tabelle -  IOSP auf einen Blick

|                                                         | Operationen | Integrationen |
|---------------------------------------------------------+-------------+---------------|
| Rechenoperationen ( +, *, %, ... )                      | Ja          | Nein          |
| Kontrollstrukturen (if, else, while, for, foreach, ...) | Ja          | Nein          |
| API-Aufrufe (Methoden von Bibliotheken)                 | Ja          | Nein          |
| Ressourcen-Zugriffe (Dateien, Datenbanken etc.)         | Ja          | Nein          |
| Standard Library, LINQ                                  | Ja          | Ja            |
| Namen andere Funktionseinheiten kennen                  | Nein        | Ja            |
| Auf Rückgabewert warten                                 | Nein        | Ja            |



** Beispiel foreach und Funktionsaufruf als negativ Beispiel.
#+BEGIN_SRC cpp
static void FormatAndPrintStrings(List<string> lines)
{
   foreach(line in lines)
   {
      string s = MyComplexFormattingFunction(line);
      Console.WriteLine(s);
   }
}

#+END_SRC
Derartiger Code wird wohl in den meisten C#-Codebasen zu finden sein und doch ist er nach Flow Design falsch.

In diesem Beispiel wurde Logik (foreach) gemischt mit einem expliziten
Funktionsaufruf einer Methode, sowie ein Zugriff auf eine externe Resource, die
Konsole.

Diese Methode ist somit nicht IOSP konform.

Es ist etwas ungewohnt, das Trennen von Integrationen und Operationen im Code auch zu berücksichtigen.
Eine For-Schleife über eine Collection laufen zu lassen und jedes Element an eine Unterfunktion weiterzureichen ist etwas,
was wohl viele Programmierer regelmässig so schreiben.
Das so etwas nun nicht mehr erlaubt ist, braucht eine gewissen Umgewöhnungszeit.


Hier nun die Umsetzung in Flow Design mit einfachsten Mitteln.


#+BEGIN_SRC cpp
static void FormatAndPrintStrings(List<string> lines)
{
   List<string> formattedLines = FormatLines(lines);
   PrintLines(formattedLines);
}

static List<string> FormatLines(List<string> lines)
{
    List<string> result = new List<string>();
    foreach(line in lines)
    {
          string formattedstring;
          // do complex formatting here
          result.Add(formattedstring)
    }
    return result;
}

static void PrintLines(List<string> lines)
{
   foreach(line in lines)
   {
      Console.WriteLine(line);
   }
}
#+END_SRC

Die Funktion wurde aufgeteilt in eine Integration (=FormatAndPrintStrings=) und zwei Operationen.
Im ersten Beispiel hat die Funktion zwei Aufgaben erfüllt, sie hat die Formatierung-Methode integriert und
das Ergebnis ausgegeben.

Nun sind Integration, Ausgabe und Formatierung sauber getrennt. Womit das SRP
auch erfüllt ist. Womit das SRP auch erfüllt ist. Dadurch wurde eine Entkopplung geschaffen, 
die Änderungen am Code leichter macht. Besonders vorteilhaft, das UI ist getrennt vom Rest

Jedoch wurde der Code nun deutlich länger. Die Foreach-Schleife ist in beide Operationen gelandet und das Initialisieren und
Befüllen der temporären Liste in =FormatLines= nimmt auch etwas Platz ein.
Dazu kommt noch, das die String-Formattierungslogik nun eingebettet in dieser Foreach-Schleife liegt, welche vorher getrennt in
einer extra Funktion sich befand.

Elegantere Lösungen mit Actions

#+BEGIN_SRC cpp
static void FormatAndPrintStrings(List<string> lines)
{
   IterateOverLines(lines, onLine=PrintFormat );
}

static void Print(string line)
{
    Console.WriteLine(line);
}
static void  PrintFormat(string line)
{
    var formattedline = MyComplexFormattingFunction(line);
    Print(formattedline);
}

static void IterateOverLines(IEnumerable<string> lines, Action<string> onLine)
{
   foreach(line in lines)
   {
      onLine(line);
   }
}

#+END_SRC

Noch eleganter mit Actions und Lambdas

#+BEGIN_SRC cpp
static void FormatAndPrintStrings(List<string> lines)
{
  IterateOverLines(lines,
    line => {
      var formattedline  = MyComplexFormattingFunction(line);
      Print(formattedline);
  });
}

static void IterateOverLines(IEnumerable<string> lines, Action<string> onLine)
{
   foreach(line in lines)
   {
      onLine(line);
   }
}

static void Print(string line)
{
    Console.WriteLine(line);
}
#+END_SRC

Noch elegantere Lösung möglich?

Eine weitere Möglichkeit besteht darin Datenfluss orientierte Sprachfeatures zu verwenden.
Somit hängt diese Möglichkeit stark von der verwendetet Programmiersprache ab.

In C# existiert eine Kategorie an Methoden, die speziell auf das Arbeiten mit Datenflüssen ausgerichtet ist, diese werden
zusammengefasst unter dem Namen LINQ (Language-Integrated Query).

Mit Hilfe von LINQ lässt sich obiges Beispiel zu einem IOSP konformen Einzeiler reduzieren.

#+BEGIN_SRC cpp
static void FormatAndPrintStrings(List<string> lines)
{
   lines.Select( x => MyComplexFormattingFunction(x)).ToList().ForEach(Console.WriteLine);
}

#+END_SRC
Man könnte sich nun darüber streiten, was man nun damit gewonnen hat. Schließlich enthält die Funktion mit LINQ im Grunde
genommen fast nun genau die selbe Logik, wie das erste Beispiel, nur mit einer anderen Schreibweise.
Den Nutzen dieser Regel erschließt sich erst, bei größeren Codebasen und kommt bei kleinen Beispielen oft nicht zum Vorschein.
Erst wenn die Integrationen mehr machen, als nur eine Funktion aufrufen, wird das Entkoppeln nützlich.
Außerdem ist der Fall einer Foreach-Schleife und ein Funktionsaufruf eine Koppelung, die nicht so dramatisch ist. Man
könnte für diesen Fall sogar eine Ausnahme machen und sie erlauben.


Zusammenfassend könnte man noch sagen, dass eine größere Lesbarkeit von IOSP konformen Programmcode entsteht, umso mehr moderne
Features eine Sprache hat 

** C# Features um Datenflüsse zu implementieren
Um Flow Design gemäß der IODA Architektur umzusetzen, helfen einem in C# einige Features die in diesem Kapitel vorgestellt werden.

*** LINQ und Lambdas
Streng genommen würde es die IODA Architektur nicht erlauben die Methoden der
Standardbibliothek innerhalb von Operationen zu verwenden. Jedoch würde das den
Code nur unnötig verkomplizieren ohne wirklich ein Nutzen daraus zu gewinnen.
Aus diesem Grund ist es sinnvoll die Methoden der Standardbibliothek der Sprache
in Operationen als auch in Integrationen zu erlauben.
In C# gehört dazu auch die Methodensammlung LINQ. 
LINQ ist eine in C# integrierte Ansammlung an Methoden die in Verbindung mit
Objekten, die das IEnumerable Interface implementieren, eingesetzt werden
können.
IEnumerable ist das Interface einer Aufzählungsklasse. Daran lässt sich bereits erahnen, dass LINQ
auf das Arbeiten mit Datenflüssen spezialisiert ist.

In den meisten Fällen werden den LINQ Methoden ein Lambda-Ausdruck übergeben.
Dieser wird auch als =Selector= bezeichnet, oder im Falle von Bedingungen als =Predicate=.
Lambda-Ausdrücke werden nach Flow Design Regeln, wie eingeständige
Funktionseinheiten betrachtet. Somit darf ein Lambda innerhalb einer 
Integrationen auch eine Operation sein.

LINQ besteht aus ca. 150 Methoden.
Eine (nicht vollständige Liste) findet sich hier.
https://msdn.microsoft.com/en-us/library/system.linq.enumerable_methods(v=vs.110).aspx

Im Folgendem werden hier nur ein paar der häufigsten verwendeten Methoden erläutert.

**** Modifizieren
Folgende Methoden verändern den Datenstrom und liefern einen neuen Datenstrom
zurück (mit Ausnahme von ForEach).
| Select                        | Selektiert jedes Element und der Sequenz und modifiziert es. Zurückgegeben wird eine Sequenz der modifizierten Elemente                                                                                                                |
| ForEach (nur für List-Klasse) | Iteriert über die Sequenz und führt mit jedem Element den Selector-Ausdruck aus. Im Gegensatz zu Select wird kein Sequenz zurückgeliefert. Diese Methode ist nicht Teil von LINQ sondern gehört ausschließlich zu der List-Klasse. Da sie jedoch oft Verwendung findet in LINQ-Ausdrücke, wird sie hier mit aufgezählt |
| First,  Last                  | Gibt das erste/letzte Element der Sequenz zurück, das eine bestimmte Bedingung erfüllt.                                                                                                                                                |
| OrderBy                       | Ordnet die Sequenz mit Hilfe eines =keySelector=-Ausdrucks. Dieser bestimmt das Sortierkriterium. In manchen Fällen (Elemente sind Zahlenwerte, oder Strings), kann dieser weggelassen werden, falls das Default-Verhalten gewünscht ist |
| Distinct                      | Duplikate werden aus der Sequenz gelöst.                                                                                                                                                                                               |
| Join                          | Zwei Sequenzen werden zu einer zusammengefasst                                                                                                                                                                                          |

**** Filtern
| Where                         | Filtern der Sequenz anhand des Predicate. Zurückgegeben wird eine Sequenz von Elementen, die das Filterkriterium entsprachen.                |
**** Überprüfungen
Diese Methoden liefern einen Boolean als Rückgabewert zurück.
| Any      | Wendet auf jedes Element den Selector-Ausdruck an,solange, bis bei einem Element der Ausdruck wahr wird. Dann wird =true= zurückgegeben, ansonsten =false=                                                      |
| Contains | Ähnlich wie =Any=, nur dass kein Selector übergeben wird, sondern ein Element, der selben Klasse, wie die Elemente des Containers. Befindet sich das Element in dem Container, dann wird =true= zurückgeben, ansonsten =false= |
| All      | Ähnlich wie =Any= mit dem Unterschied, dass nur dann =true= zurückgeben wird, wenn für alle Elemente des Containers der Ausdruck wahr ist.                                                                               |
**** Berechnungen
Bei Container mit Zahlenwerten (=int=, =float=, =decimal=,...) als Elementen,
können nachfolgende Funktionen ohne zusätzliche Parameter aufgerufen werden.
Falls dies nicht der Fall ist, muss ein Selector-Ausdruck, wahlweise als
Lambda-Ausdruck, mit übergeben werden. Mit dem Selector kann bestimmt werden, wie
die mathematische Rechenoperationen mit jedem Element umzugehen hat.
| Sum     | Aufsummieren der Elemente                                    |
| Max     | Gibt das Element mit dem höchsten Wert zurück                |
| Min     | Gibt das Element mit dem niedrigsten Wert zurück     |
| Count   | Zählt die Elemente des Containers und gibt die Anzahl zurück |
| Average | Berechnet den Durchschnitt der Sequenz                      |
**** Überspringen und Nehmen
Diese Methoden liefern genau wie die modifizierenden Methoden als Rückgabewert
eine neue Sequenz an Daten zurück.
| TakeWhile | Nimmt Elemente solange aus dem Container, bis eine Bedingung erfüllt ist. Es wird eine Sequenz von allen genommenen Elementen zurückgegeben                                                 |
| Skip      | Überspringt eine Anzahl an Elementen                                                                                                                                                         |
| SkipWhile | Überspringt die ersten Elemente einer Sequenz, solange bis bis die Bedingung von einem Element nicht erfüllt wird, dann wird ohne weitere Überprüfungen der Rest der Sequenz zurückgegeben |
**** Konvertieren
Sequenzen können mit Hilfe eines einfach Methodenaufrufs zu einem bestimmten Typ
von Container konvertiert werden. Zum Beispiel: =ToList= oder =ToDictionary=.

**** Parallele Verarbeitung
Datenströme können von LINQ auch parallel verarbeitet werden. Dazu konvertiert
man die Sequenz mit =toParallel()= zu einem PLINQ Datenstrom.
Anschließend ausgeführte Methoden werden, falls möglich parallel verarbeitet.

**** Referenzen
Referenz: https://www.dotnetperls.com/linq

*** yield return
Hiermit kann man ein Producer-Consumer Pattern implementieren.
Voraussetzung ist hierfür, dass der Rückgabewert der Methode ein =IEnumerable= Interface ist.

Das folgende Flow Design soll mit =yield return= realisiert werden.

#+CAPTION: http://www.code-whisperer.de/preview/2015/06/14/eva/
[[./img/FlowDesign2.png]]


Das Programm ist eine Konsolenanwendung, die den Benutzer eine Eingabe erlaubt.
Wenn die Eingabe die Zahl 42 entspricht, wird das Programm beendet, wenn nicht,
dann wird die Zahl ausgegeben und der Benutzer kann wieder eine Zahl eingeben.
Das wiederholt sich, solange bis der Benutzer die Zahl 42 eingetippt hat.


**** Erläuterung des Schaubildes
Die Main Funktion wird nach dem Programmstart ( leerer Kreis ) ohne Parameter aufgerufen.
Danach ruft diese die Funktion =ReadNumbersFromCmd= auf, welche aus der Konsole eine Eingabe ließt und sie
zu einem int parset. Der int nimmt die Main Funktion entgegen und gibt diesen an FindtheAnswer weiter.
Diese Funktion hat die Aufgabe den entgegengenommenen int mit der Zahl 42 zu vergleichen. Wenn die Zahl 42 ist, wird der Datenstrom
abgebrochen. Wenn es nicht die 42 war, dann wird der int nach außen gereicht und die Main Funktion reicht die Zahl an die
PrintNumber Funktion weiter. PrintNumber gibt die Zahl in die Konsole aus.
Wenn der Datenstrom abbricht, returned die Mainfunktion und das Programm wird beendet.

**** Implementation

#+BEGIN_SRC cpp
class Program
{
  static void Main()
  {
    IEnumerable<int> numbers = ReadNumbersFromCmd();
    IEnumerable<int> answer = FindTheAnswer(numbers);
    PrintNumbers(answer);
  }

  public static IEnumerable<int> ReadNumbersFromCmd()
  {
    while (true)
    {
      var line = Console.ReadLine();
      yield return int.Parse(line);
    }
  }

  private static IEnumerable<int> FindTheAnswer(IEnumerable<int> numbers)
  {
    return numbers.TakeWhile(x => x != 42);
  }

  private static void PrintNumbers(IEnumerable<int> numbers)
  {
    foreach (var number in numbers)
    {
      Console.WriteLine(number);
    }
  }
}
#+END_SRC

Der Producer ist in dem Fall der =ReadNumbersFromCmd=.
Dieser produziert ein endloser Stream an =int=-Daten.
Es wird jedoch immer nur ein Element erzeugt und erst nachdem der Consumer das
Element abgefragt hat, wird ein neues Element erzeugt.
Wenn nichts mehr konsumiert wird, wird auch nichts mehr produziert.
Den Abbruch der Endlosschleife ( also das Stoppen des Datenflusses) kann somit auch eine andere Funktion außerhalb der Schleife
übernehmen.




** FRAGEN Datenströme mit mehreren Wegen
*** Ein Output-Weg mehrere Empfänger
[[./img/diagramOut1to2.png]]

Falls ein Output an mehrere Empfänger weitergereicht werden soll, so gibt es
mehrere Möglichkeiten dies zu realisieren.
Die beste Möglichkeit ist, wenn die übergeordnete Integration den Rückgabewert
von F an die beiden nachfolgenden Funktionseinheiten einfach weiterreicht.
Eine weitere Möglichkeit wäre, wenn der Methode F ein Action mit übergeben wird,
und die übergeordnete Integration ruft G und H in einem Lambda auf.
Die dritte Möglichkeit besteht darin Events zu nutzen.
Leider bedarf es dann bei der Benutzung der API mehr Vorsicht, da man sich vorher auf ein Events registrieren muss, bevor man
die gewünschte Funktion aufrufen kann.

Implementierungsbeispiel mit Lambda und Action:
#+BEGIN_SRC cpp

  static void Main()
  { 
      F(
      onResult:number => {
          G(number);
          H(number);
      });
  }

  static void F(Action<int> onResult)
  {
      int n = 100;
      onResult(n);
  }

  static void G(int number){}

  static void H(int number){}
  
#+END_SRC




*** DRAFT Mehrere Output-Wege

[[./img/diagramOut2.png]]

Wäre es für eine Operation erlaubt eine andere Funktionseinheit zu kennen, so
wäre es möglich die nachfolgenden Methoden per Namen innherhalb von /F/
aufzurufen. Da aber Operationen entkoppelt von ihrer Umwelt sein sollen, geht das nicht.

Hat eine Funktionseinheit zwei Output-Wege, so gibt es zwei
Deutungsmöglichkeiten: Entweder kommen immer beide Daten x und y zurück oder
aber, es kann auch vorkommen, dass x und y nicht immer zurückgeben werden.
Im ersten Fall, wäre eine Umsetzung durch ein Tupel als Rückgabewert machbar.
Ist jedoch nicht gewährleistet, dass immer beide Werte zurückgeben werden, so
muss man in C# die Outputwege als Actions über die Argumente der Methode
mitgeben. Somit werden die Verantwortlichkeiten bewahrt und die übergeordnete
Integration koordiniert weiter den Datenfluss. Die Operation selbst kennt nun keine
anderen Funktionseinheiten, sie weiß nur, dass sie zwei Ausgänge besitzt.

Ist diese Mehrdeutigkeit nicht erwünscht, so gibt es auch die Möglichkeit die den Kontrollfluss, auch in das Diagramm hier mit
dazu nehmen. Man kann in den Winkel der beiden Pfeile notieren, ob beide
Datenflüsse fließen, oder immer nur einer. 
Oft reicht es aber auch schon aus die Output-Wege zu benennen, damit ersichtlich
wird, ob es sich um ein /and/, /or/ oder /xor/ handelt. Zum Beispiel würde ein /onError/
und /onSuccess/ auf ein /xor/ hindeuten.

Alternativ könnte man auch hier Events nutzen, was aber durch das zusätzliche
Registrieren auf das Event nur in seltenen Fällen zu empfehlen ist.


Üblicherweise entstehen mehrere Output-Wege, sobald man eine
If-Else-Logik verwendet.

Ein typischer Programmierstil in C# veranschaulicht folgendes Beispiel:
#+BEGIN_SRC cpp

  static void CheckAndSaveToFile(string inputstring)
  {
     var filename = @"C:/test.txt";

     if(IsCorrectFormatted(inputstring))
        SaveStringToFile(inputstring, filename);
     else
        PrintError("Wrong Input Format");
  }

  static bool IsCorrectFormatted(string inputstring)
  {
     bool isCorrectFormatted = false;
     
     // do string format checking here
     
     return isCorrectFormatted;
  }

  #+END_SRC

Eine komplizierte Bedingungsüberprüfung in eine separate Methode auszulagern
gilt als guter Programmierstil. Flow Design geht hier etwas weiter. Da es
untersagt ist, eine Kontrollstruktur und ein Methodenaufruf in einer
Methode zu kombinieren, besteht die Lösung darin, auch die If-Else-Anweisung in
die ausgelagerte Methode zu extrahieren und die zwei möglichen Ausgänge als Actions
in die Methode zu übergeben. Mithilfe der "Named Parameter" lässt sich die
Leserlichkeit weiter steigern ( vorallem dann, wenn es mehr als zwei Ausgänge
gibt, da man jedem Ausgang einen sinnvollen Namen geben kann).

#+BEGIN_SRC cpp

  static void CheckAndSaveToFile(string inputstring)
  {
     var filename = @"C:/test.txt";

     CheckIsCorrectFormat(inputstring, 
        onCorrect: () => SaveStringToFile(inputstring, filename);
        onError: () => PrintError("Wrong Input Format"));
  }

  static void CheckIsCorrectFormat(string inputstring, Action onCorrect, Action onError)
  {
     bool isCorrectFormatted = false

     // do string format checking here

     if (isCorrectFormatted) 
        onCorrect();
     else
        onError();
  }

  #+END_SRC

 Wie in diesem Beipsiel zu erkennen ist, ist es möglich innerhalb der
 Lambdas auf lokale Variablen der übergeordneten Methode zuzugreifen. Dies
 erlaubt es der Integration einer nachfolgenden Operation (hier =SaveStringToFile=) Parameter zu übergeben,
 die die erste Operation (hier =CheckIsCorrectFormat=) selbst nicht kennt (hier
 =filename= und auch =inputstring=). Die Operation ruft eine Action ohne
 Parameter auf. Die Integration kann dadruch innerhalb des Lambda-Bodies frei
 bestimmen, welche Methoden als nächstes aufgerufen werden.
 Dadruch schränkt man die möglichen nachfolgenden
 Methodenaufrufe nicht durch die Operation ein. In Sprachen die dieses Feature
 nicht unterstützen, macht das die Umsetung von Flow Design deutlich umständlicher.
 Dazu mehr im Anhang "Flow Design in anderen Sprachen".

*** mit und/oder den Kontrollfluss notieren.


FRAGE;
1) XOR , OR ,...
2) Kann man eine Implementationsregel davon ableiten?
   Wenn ich ein UND habe, dann kann der Strom als Tupel/Datentyp realisiert
   werden. Dann muss die Integration einfach nur den ersten Teil an die eine
   Methode weiterreichen und den zweiten Teil an die andere.
   Wenn es es ODER ist, dann sind gelten ähnliche Regeln, wie für Optionale
   Outpute.
   Ich muss eine Action mitgeben. (Oder Datentypen, die null sein dürfen?)

** Weitere Beispiele was erlaubt ist und was nicht erlaubt ist.
*** DONE Rückgabewert erwarten von Funktion als Parameter übergeben.
CLOSED: [2016-09-08 Do 14:08]
In C# gibt es neben den =Actions=, die keine Rückgabewerte erlauben, auch Funktionszeiger, die einen Rückgabewert erlauben.
Diese werden mit =Func<Parameter,...,Rückgabewert>= deklariert.
Die Func würde zwar das IOSP erfüllen, die Operation würde die andere Funktion nicht kennen,
jedoch würde trotzdem eine funktionale Abhängigkeit entstehen und somit ist die untenstehende Funktion nicht Flow Design konform.

#+BEGIN_SRC cpp
static List<string> FormatStrings(List<string> lines , Func<string,string> formatFunc )
{
   List<string> result = new List<string>();
   foreach(line in lines)
   {
      string formattedstring = formatFunc(line);
      result.Add(formattedstring)
   }
   return result;
}


#+END_SRC


*** FRAGEN API-Aufruf, Filehandling?, Daten in Integrationen?

Was ist erlaubt in Integrationen?

#+BEGIN_SRC cpp
static void Foo ()
{

   var json = http.get(adress);

   Person p = new Person();
   p.name = "Peter"

   with (var f = File.Open(path))
   {
      dosomething();
   }
   OtherFunc();
}

#+END_SRC

** Warum macht man das? Sinn der Aufteilung.
*** DRAFT Die Perlenkette
Die Codebasis, die nach IOSP implementiert wurde, so bildlich gesprochen einer
Perlenkette ähneln. Der Code besteht aus aneinandergereihte Funktionseinheiten,
die zusammen ein großes Ganzes bilden. Möchte man Änderungen an dem Programm
vornehmen, so brauch man nur an einer Stelle die Kette zu öffnen und etwas
hinzufügen oder entfernen. Danach schließt man die Kette wieder und das Programm
läuft wieder. Beim einfügen oder entfernen ist nur darauf zu achten, dass die
Eingänge und Ausgänge zueinander passen. Ist das nicht der Fall, so kann man das
entweder durch eine weitere dazwischengeschoben "Adapter"-Funktionseinheit
beheben, oder man ändern die anschließenden Funktionseinheiten und deren
Eingänge und Ausgänge entsprechend um.
Die erste Variante bringt möglicherweise einen Performanceverlust mit sich.
In vielen Stellen des Codes, ist dies jedoch meistens kein Problem.
Falls die Funktionseinheiten an anderer Stelle verwendet werden, ist
möglicherweise auch eine Abänderung nicht einfach umzusetzen.

*** FRAGEN Größtes Übel funktionale Abhängigkeiten.
Funktionale Abhängigkeiten sind im echten Leben auch ein Problem, wenn es um
produktive Arbeitsabläufe geht.
Wenn jemand seine Arbeit erst zu Ende bringen kann, wenn ein anderer seine Arbeit
getan hat, ist das schlecht.
Besser ist es, wenn eine Person sich von einem Pool an Aufgaben bedienen kann,
sie unabhängig von anderen Personen erledigen kann und dann das Ergebnis wieder
in ein Pool zurückgibt, von denen sich andere wieder bedienen können.


*** Optional
-  nochmal rückbesinnen auf CCD
** DRAFT Ausnahmen
Generell gilt die Regel, wenn ich mich bewusst an einer Stelle gegen die IOSP
Regel entscheide, ist dann in Ordnung, solange ich es gut begründen kann.
Es gibt jedoch bereits einige Fälle, wo sich ein Aufheben der Regel als gut
herausgestellt hat.
*** FRAGEN Rekursion
Operationen dürfen sich selber aufrufen.
Was ist mit einer Kette von Operationen, wo die letzte Operation die Rekursion startet?
*** DONE Integrationen
CLOSED: [2016-09-08 Do 14:08]
**** DONE Try / Catch
CLOSED: [2016-09-08 Do 14:08]
Oft braucht man auf oberster Ebene, einen Try/Catch, der alle Exceptions abfangen soll, und eine generelle Fehlerbehandlungsroutine
startet. Hier bleibt einem nichts anderes übrig, als die Regel keine Logik in den Integrationen zu haben, etwas aufzuweichen.

**** DONE LINQ / Standard-Library Funktionen
CLOSED: [2016-09-08 Do 14:08]
Manche Funktionalitäten, die die Sprache selbst bereitstellt, können streng genommen als API-Aufrufe bezeichnet werden
. Jedoch gilt hier eine Ausnahme. Man darf auch in Integrationen diese Funktionalität verwenden.
Beispiele aus C#:
=int.TryParse= , =List<>.Sort=, =Dictionary<>.Insert=, ...


** FRAGEN Zusammenfassung

   Tabelle:
   Daten - Methoden in Daten-Objekte aufrufen? Darf Operation die Methode kennen?
   Daten - was bedeutet die eigentlich? Methoden die zum Datentyp
   gehören/gekapselt sind, sind die in Operationen erlaubt? file open handlers?
   Daten - Darf Integration wirklich Konstruktor aufrufen, das sind doch Daten, oder gelten nur persistente Daten?



** Leserlichkeit
In diesem Kapitel werde ich mich speziell mit der Frage der Lesbarkeit mancher Flow Design Implementationen beschäftigen.
Ziel von CCD ist es nicht nur den Code evolvierbar zu halten, sondern ihn auch besser leserlich zu machen.

*** Integration gibt Funktionszeiger an Operationen, welche diesen jedoch auch nur an die nächste Operation weitergibt.
Auf Ebene der Integration, wo man eigentlich das Zusammenspiel der einzelnen Operationen leicht erkennen soll, ist es bei solch einem Beispiel den
Fluss nachzuvollziehen.

-> main ->
->DecideValidationProcess -> Validation -> DoSomething ->

Lösung: erstellen einer weiteren Integration, die die beiden letzten Operationen integriert.
-> main ->
-> DecideValidationProcess -> Validation1AndDoSomething ->
                          -> Validation -> DoSomething ->


* Die Entwurfsmethode

** TODO System-Umwelt-Diagramm
    Man zeichnet ein Kreis auf ein Papier, diese stellt die Domäne dar.
    Auf der linken Seite hängt man die Sachen dran, die auf die Domäne zugreifen sogenannte Portale, zum Beispiel HTTP-Zugriff,
    Batch mode, oder GUIs.
    Auf der anderen Seite sind die Provider, diese Stellen externe Ressourcen zur Verfügung, die die Domäne verwendet.
    Ziel ist es später in der Implementierung darauf zu achten, dass die "Schicht" oder "Membran", zwischen Domäne und Außenwelt möglichst
dünn bleibt. Somit lässt sich die Domäne besser testen und es lassen sich leichter neue Portale und Provider anhängen.

** TODO Interfaceskizze ( im Falle einer GUI Anwendung )
Man zeichnet eine einfache Skizze der GUI auf ein Papier und überlegt sich, welche Interaktionen kann der Nutzer machen.
Diese Interaktionen werden dann gesammelt und für jedes wird dann ein eigenes Flow Design erstellt.

** TODO Flow Design Entwurf
Herauskristallisieren der einzelnen Funktionseinheiten und welche Daten von wo nach wo fließen.

** FRAGEN Einordnen der Funktionseinheiten in bestimmte Container

Mit Container meint man: Klassen, DLL, Anwendungen.
Man fasst eine oder mehrere Funktionseinheiten zusammen, indem mag zum Beispiel alle mit einer gestrichelten Linie einkreist oder alle die zur selben Klasse
gehören farblich markiert. Der Name der Klasse notiert man dann im eingekreisten Feld oder unter jeder Funktionseinheit.
  endet mit Einteilen in Klassen, DLL, Anwendungen,...

  Entwurf ist ein Interaktiver Prozess, somit wäre Roundtrip super "Sinn des Systems SharpFlowDesign erläutern"

1)FRAGE: Manchmal wird eine Funktionseinheit selbst als Klasse implementiert? Dann kann ich sie ja nicht in eine andere Klasse schieben.

** FRAGEN Optional - Bestimmen von Parallelitäten
Es können zusätzlich noch Pfeile eingefärbt werden, um zu verdeutlichen, dass
manche Datenströme parallel laufen können.
FRAGE: Wie genau geht das?
* TODO Rekursive Eigenschaft
Das Schöne an Flow Design und dem Konzept der Softwarezelle ist, dass sie rekursive ist.
Man kann das Problem/die Anwendung ganz oben als eine Softwarezelle (oder hier der Kreis mit den Providern? ist das auch eine Softwarezelle?)
verstehen, indem links Portale Zugriffe machen und rechts davon, die Softwarezelle wiederum auf ihre Provider Zugriffe macht.
Die einzelnen Aktionen aus dem die Anwendung besteht können wiederum als Softwarezellen verstanden werden, auf die von links
der Zugriff und der Input in die Softwarezelle hineinkommen, die Softwarezelle bearbeitet die Anfrage und rechts von ihr, kommt das
Ergebnis heraus. Die Interaktion kann wiederum wieder in kleiner Teile zerlegt werden, die alle eine Softwarezelle sind, mit Inputs und
Outputs. Damit ist die Architektur weniger starr, als zum Beispiel das Schichtenmodell oder das Zwiebelschalenmodell ( laut Ralf Westphal ).



* Backlog
** Einfaches Beispiel eines Flow Designs
*** Negativ Beispiel
#+BEGIN_SRC cpp
...
static void Main()
{
   while (true)
   {
      int number = ReadNumberFromCmd();
      bool isAnswer = FindTheAnswer(number);

      if (isAnswer)
         break;
      else
         PrintNumber(number);
   }
}

static int ReadNumbersFromCmd()
{
    var line = Console.ReadLine();
    int number = int.Parse(line);
    return number;
}

static bool FindtheAnswer(int number)
{
    if (number == 42)
        return true;
    return false;
}
...
#+END_SRC
