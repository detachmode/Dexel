* Systemanalyse

** Vision
Es wäre schon, wenn eine Möglichkeit hätte direkt aus einem Flow Design Diagramm den Code zu generieren, der sich aus dem Schaubild ableiten lässt.
Wenn man nun indem erzeugten Code weiter arbeitet und möglicherweise auch die Struktur wieder abändert, so wäre es auch komfortabel diesen wieder zurück in ein Flow Design zu 
verwandeln.
Die große Vision besteht also darin, einen "Roundtrip" zu erschaffen:
Erzeugen eines Flow Design Diagrammes in einem Editor -> Automatisches Erzeugen von Code -> Code einlesen und automatisch ein Flow Design Diagramm erzeugen.

Beim Erzeugen des Codes geht es darum, die Methoden-Signaturen zu erzeugen und im Falle von Integrationen, sogar die Implementationen.

** Schwierigkeiten eines Roundtrips


**  Alternative Lösung von zu schwiergen Problemen, Einschränkungen
   Attribute als Hilfe zum Identifizieren von Funktionen.

* Der Editor
** Brainstroming
    Gute Usability in Anlehnung an Node-basierte Grafik Anwendungen.
    Es gibt einige Andwendungen, speziell in Grafikanwendungen, die sich schon seit vielen Jahren auf Node-basierte Editoren konzentrieren.
    Diese dienen als gute Inspiration, wie eine gute Useability aussehen kann.
    In diesem Fall wurden das Compositing-Programm The Foundary Nuke und das 3dsmax Plugin Thinking Particles als Inspiration herangezogen.

   - Einkreisen/ Gruppieren in Klassen
   - Erzeugen von Nodes, Beschriften, Bewegen
   - Selektieren (Rect-Selection, Subtraktion, Addition),
   - Duplizieren, 
   - Eingliedern von neuen Nodes in bestehende.
   - Anordenen, automatisches Spacing
   - Keyboard-Shortcuts zum effizenteren Arbeiten.
   - Integrationen Innere Flows darunter darstellen
   - Integrationen wenn zu wenig Platz um Inneren Flow darunter dazustellen, dann automtisch in neues Flow Design
   - Einkreisen/ Gruppieren in Klassen
   - Autosave
   - Drucken / Exportieren als PDF in weiß auf schwarz Farbschema
   
*** weiter Ideen
   - Implementation Previewen mit Maus-over
   - Tests dranhängen an Node, Kommentare dranhängen,
** Vorstellung was erreicht wurde
* Diagramm ➔ Code
** Vorstellung Roslyn
** Vorstellung was erreicht wurde
* Code ➔ Diagramm
* Schwierigkeiten, Ausblick und Fazit
** Eigene Meinung zu FLow Design
Ich hatte Probleme ein Flow Design für die GUI Logik des Editors zu entwerfen, da
ich die technische Umsetzung mit WPF nicht im vorraus wusste, sondern sie erst
durch Reserche und vielen Ausprobieren am Code herausfand, was die beste Möglichkeit ist.
Auch Wenn es um die Frage der Usability geht, ist oft eine mehrmaliges
Ausprobieren anhand eines einfach Protopyen meiner Meinung nach die einzige
Möglichkeit wirlich das beste an Usability für ein Programm rauszukitzeln.
Eine Interfaceskizze und dann gleich mit der Abarbeitung der Featureliste
fortzufahren ist nur für einfachere GUIs ausreichend. 
Ich persönlich habe den Wunsch neue innovative GUIs zu entwerfen, um dies zu
Verwirklichen erfordert das mehrere Interationen an Skizzen und Protoypen.
Hier würde ich dann das Flow Design eher nach dem Protoypen stellen.
Also um sich zu überlegen, wie man den Protoypen dann refaktorisiert, wenn ich
bereits alle technischen Probleme (API, WPF) gelöst habe und es nur noch darum
geht, alles in eine saubere Form zu bringen.
Also gerade bei komplexeren Frameworks wie WPF, wo es viele Möglichkeiten gibt
ein Problem zu lösen, hilft einem das Flow Design eher am Anfang wenig.
Möglicherweise implementiere ich etwas von Grund auf neu, was mir das Framework
vielleicht mit wenigen Zeilen Code liefern hätte können, wenn ich nur vorher
etwas reserchiert hätte. 

Außerdem seh ich einen großen Nutzen von Flow Desing Diagrammen in der
Dokumentation. Das was man an Übersichtlichkeit des Programmverlaufs verliert, wenn man viele kleine
Funktionen hat, kann man durch ein Flow Design Diagramm in einem übersichtlichen
Schaubild wieder zurück gewinnen. Nach längerer Pause an einem Projekt oder für
eine andere Person hilft einem das Flow Design Diagramm um schnell wieder den
Überblick über das Zusammenspiel der einzelnen Teile des Projektes zu gewinnen.
Meiner Meinung nach ist es für Dokumentation hilfreicher als ein UML-Diagramm.

Auch der Fokus auf den Datenfluss anstatt auf Kontrollfluss hat mir gut gefallen
und das häufigere Erzeugen von neuen Datentypen finde ich gut um den Code
überschaubar und robuster zu gestalten.

  

  


