using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using FlowDesignModel;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Editing;

namespace Roslyn
{

    public class MyGenerator
    {
        private readonly Workspace _workspace = new AdhocWorkspace();
        public SyntaxGenerator Generator;

        


        public MyGenerator()
        {
            Generator = SyntaxGenerator.GetGenerator(_workspace, LanguageNames.CSharp);
        }


        public void GenerateCodeAndPrint(MainModel model)
        {
            var generator = Generator;
            var methods = model.SoftwareCells
                .Select(softwareCell => Operations.GenerateOperationMethod(Generator, softwareCell))
                .ToList();
            var body = Integrations.CreateIntegrationBody(Generator, model.Connections, model.SoftwareCells);
            var main = Operations.GenerateOperationMethod(Generator, "main", body);
            methods.Add(main);
            var interactionsClass = Class("Interactions", methods.ToArray());


            //Get a CompilationUnit(code file) for the generated code
            var usingDirectives = generator.NamespaceImportDeclaration("System");
            var namespaceDeclaration = generator.NamespaceDeclaration("AutoGenerated", interactionsClass);
            var newNode = generator.CompilationUnit(usingDirectives, namespaceDeclaration).
                NormalizeWhitespace();

            File.WriteAllText(@"C:\Users\Dennis\Desktop\autogenerated.cs", 
                newNode.NormalizeWhitespace().ToFullString());
            Console.Write(newNode.NormalizeWhitespace().ToFullString());
        }


        public SyntaxNode Class(string name, SyntaxNode[] members)
        {
            // Generate the class
            var classDefinition = Generator.ClassDeclaration(
                name, null,
                Accessibility.Public,
                DeclarationModifiers.None,
                null,
                null,
                members
                );
            return classDefinition;
        }


       
    }


    public class GeneratedLocalVariable
    {
        public SoftwareCell Source;
        public string VariableName;
    }


    internal class CreatedLocalMethod
    {
        public string LocalName;
        public string LocalType;
        public SoftwareCell SoftwareCell;
    }


    public class MethodWithParameterDependencies
    {
        public SoftwareCell OfSoftwareCell;
        public List<Parameter> Parameters = new List<Parameter>();
    }


    public class Parameter
    {
        public bool FoundFlag;
        public SoftwareCell Source;
    }


    public class NameType
    {
        public string Name, Type;
    }

}